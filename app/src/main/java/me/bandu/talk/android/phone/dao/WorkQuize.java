package me.bandu.talk.android.phone.dao;


import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "WORK_QUIZE".
 */
public class WorkQuize {

    private Long wq_id;
    private Long stu_job_id;
    private Long quiz_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WorkQuizeDao myDao;

    private HomeWork homeWork;
    private Long homeWork__resolvedKey;

    private Quiz quiz;
    private Long quiz__resolvedKey;


    public WorkQuize() {
    }

    public WorkQuize(Long wq_id) {
        this.wq_id = wq_id;
    }

    public WorkQuize(Long wq_id, Long stu_job_id, Long quiz_id) {
        this.wq_id = wq_id;
        this.stu_job_id = stu_job_id;
        this.quiz_id = quiz_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkQuizeDao() : null;
    }

    public Long getWq_id() {
        return wq_id;
    }

    public void setWq_id(Long wq_id) {
        this.wq_id = wq_id;
    }

    public Long getStu_job_id() {
        return stu_job_id;
    }

    public void setStu_job_id(Long stu_job_id) {
        this.stu_job_id = stu_job_id;
    }

    public Long getQuiz_id() {
        return quiz_id;
    }

    public void setQuiz_id(Long quiz_id) {
        this.quiz_id = quiz_id;
    }

    /** To-one relationship, resolved on first access. */
    public HomeWork getHomeWork() {
        Long __key = this.stu_job_id;
        if (homeWork__resolvedKey == null || !homeWork__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HomeWorkDao targetDao = daoSession.getHomeWorkDao();
            HomeWork homeWorkNew = targetDao.load(__key);
            synchronized (this) {
                homeWork = homeWorkNew;
            	homeWork__resolvedKey = __key;
            }
        }
        return homeWork;
    }

    public void setHomeWork(HomeWork homeWork) {
        synchronized (this) {
            this.homeWork = homeWork;
            stu_job_id = homeWork == null ? null : homeWork.getStu_job_id();
            homeWork__resolvedKey = stu_job_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Quiz getQuiz() {
        Long __key = this.quiz_id;
        if (quiz__resolvedKey == null || !quiz__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuizDao targetDao = daoSession.getQuizDao();
            Quiz quizNew = targetDao.load(__key);
            synchronized (this) {
                quiz = quizNew;
            	quiz__resolvedKey = __key;
            }
        }
        return quiz;
    }

    public void setQuiz(Quiz quiz) {
        synchronized (this) {
            this.quiz = quiz;
            quiz_id = quiz == null ? null : quiz.getQuiz_id();
            quiz__resolvedKey = quiz_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
