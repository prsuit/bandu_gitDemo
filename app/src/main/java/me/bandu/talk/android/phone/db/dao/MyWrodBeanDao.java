package me.bandu.talk.android.phone.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.bandu.talk.android.phone.db.bean.MyWrodBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_WROD_BEAN".
*/
public class MyWrodBeanDao extends AbstractDao<MyWrodBean, Long> {

    public static final String TABLENAME = "MY_WROD_BEAN";

    /**
     * Properties of entity MyWrodBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Word_id = new Property(0, Long.class, "word_id", true, "WORD_ID");
        public final static Property Word_name = new Property(1, String.class, "word_name", false, "WORD_NAME");
        public final static Property Word_info = new Property(2, String.class, "word_info", false, "WORD_INFO");
    };


    public MyWrodBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MyWrodBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_WROD_BEAN\" (" + //
                "\"WORD_ID\" INTEGER PRIMARY KEY ," + // 0: word_id
                "\"WORD_NAME\" TEXT," + // 1: word_name
                "\"WORD_INFO\" TEXT);"); // 2: word_info
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_WROD_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyWrodBean entity) {
        stmt.clearBindings();
 
        Long word_id = entity.getWord_id();
        if (word_id != null) {
            stmt.bindLong(1, word_id);
        }
 
        String word_name = entity.getWord_name();
        if (word_name != null) {
            stmt.bindString(2, word_name);
        }
 
        String word_info = entity.getWord_info();
        if (word_info != null) {
            stmt.bindString(3, word_info);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyWrodBean readEntity(Cursor cursor, int offset) {
        MyWrodBean entity = new MyWrodBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // word_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // word_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // word_info
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyWrodBean entity, int offset) {
        entity.setWord_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWord_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWord_info(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MyWrodBean entity, long rowId) {
        entity.setWord_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MyWrodBean entity) {
        if(entity != null) {
            return entity.getWord_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
