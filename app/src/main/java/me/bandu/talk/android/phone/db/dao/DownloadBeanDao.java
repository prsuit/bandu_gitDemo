package me.bandu.talk.android.phone.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.bandu.talk.android.phone.db.bean.DownloadBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_BEAN".
*/
public class DownloadBeanDao extends AbstractDao<DownloadBean, Long> {

    public static final String TABLENAME = "DOWNLOAD_BEAN";

    /**
     * Properties of entity DownloadBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Download_id = new Property(0, Long.class, "download_id", true, "DOWNLOAD_ID");
        public final static Property Download_name = new Property(1, String.class, "download_name", false, "DOWNLOAD_NAME");
        public final static Property Download_state = new Property(2, Integer.class, "download_state", false, "DOWNLOAD_STATE");
        public final static Property Download_progress = new Property(3, Integer.class, "download_progress", false, "DOWNLOAD_PROGRESS");
        public final static Property Download_message = new Property(4, String.class, "download_message", false, "DOWNLOAD_MESSAGE");
        public final static Property Download_subject = new Property(5, Integer.class, "download_subject", false, "DOWNLOAD_SUBJECT");
        public final static Property Download_category = new Property(6, Integer.class, "download_category", false, "DOWNLOAD_CATEGORY");
    };


    public DownloadBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_BEAN\" (" + //
                "\"DOWNLOAD_ID\" INTEGER PRIMARY KEY ," + // 0: download_id
                "\"DOWNLOAD_NAME\" TEXT," + // 1: download_name
                "\"DOWNLOAD_STATE\" INTEGER," + // 2: download_state
                "\"DOWNLOAD_PROGRESS\" INTEGER," + // 3: download_progress
                "\"DOWNLOAD_MESSAGE\" TEXT," + // 4: download_message
                "\"DOWNLOAD_SUBJECT\" INTEGER," + // 5: download_subject
                "\"DOWNLOAD_CATEGORY\" INTEGER);"); // 6: download_category
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadBean entity) {
        stmt.clearBindings();
 
        Long download_id = entity.getDownload_id();
        if (download_id != null) {
            stmt.bindLong(1, download_id);
        }
 
        String download_name = entity.getDownload_name();
        if (download_name != null) {
            stmt.bindString(2, download_name);
        }
 
        Integer download_state = entity.getDownload_state();
        if (download_state != null) {
            stmt.bindLong(3, download_state);
        }
 
        Integer download_progress = entity.getDownload_progress();
        if (download_progress != null) {
            stmt.bindLong(4, download_progress);
        }
 
        String download_message = entity.getDownload_message();
        if (download_message != null) {
            stmt.bindString(5, download_message);
        }
 
        Integer download_subject = entity.getDownload_subject();
        if (download_subject != null) {
            stmt.bindLong(6, download_subject);
        }
 
        Integer download_category = entity.getDownload_category();
        if (download_category != null) {
            stmt.bindLong(7, download_category);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadBean readEntity(Cursor cursor, int offset) {
        DownloadBean entity = new DownloadBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // download_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // download_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // download_state
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // download_progress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // download_message
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // download_subject
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // download_category
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadBean entity, int offset) {
        entity.setDownload_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownload_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownload_state(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDownload_progress(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDownload_message(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownload_subject(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDownload_category(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DownloadBean entity, long rowId) {
        entity.setDownload_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DownloadBean entity) {
        if(entity != null) {
            return entity.getDownload_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
