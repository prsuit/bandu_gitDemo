package me.bandu.talk.android.phone.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_WORK".
*/
public class HomeWorkDao extends AbstractDao<HomeWork, Long> {

    public static final String TABLENAME = "HOME_WORK";

    /**
     * Properties of entity HomeWork.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Stu_job_id = new Property(0, long.class, "stu_job_id", true, "STU_JOB_ID");
        public final static Property Job_id = new Property(1, Integer.class, "job_id", false, "JOB_ID");
        public final static Property Job_status = new Property(2, String.class, "job_status", false, "JOB_STATUS");
        public final static Property Stu_job_status = new Property(3, String.class, "stu_job_status", false, "STU_JOB_STATUS");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Cdate = new Property(5, String.class, "cdate", false, "CDATE");
        public final static Property Cday = new Property(6, String.class, "cday", false, "CDAY");
        public final static Property Deadline = new Property(7, Long.class, "deadline", false, "DEADLINE");
        public final static Property Percent = new Property(8, Integer.class, "percent", false, "PERCENT");
        public final static Property Isfirst = new Property(9, Boolean.class, "isfirst", false, "ISFIRST");
    };


    public HomeWorkDao(DaoConfig config) {
        super(config);
    }
    
    public HomeWorkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_WORK\" (" + //
                "\"STU_JOB_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: stu_job_id
                "\"JOB_ID\" INTEGER," + // 1: job_id
                "\"JOB_STATUS\" TEXT," + // 2: job_status
                "\"STU_JOB_STATUS\" TEXT," + // 3: stu_job_status
                "\"TITLE\" TEXT," + // 4: title
                "\"CDATE\" TEXT," + // 5: cdate
                "\"CDAY\" TEXT," + // 6: cday
                "\"DEADLINE\" INTEGER," + // 7: deadline
                "\"PERCENT\" INTEGER," + // 8: percent
                "\"ISFIRST\" INTEGER);"); // 9: isfirst
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_WORK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeWork entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStu_job_id());
 
        Integer job_id = entity.getJob_id();
        if (job_id != null) {
            stmt.bindLong(2, job_id);
        }
 
        String job_status = entity.getJob_status();
        if (job_status != null) {
            stmt.bindString(3, job_status);
        }
 
        String stu_job_status = entity.getStu_job_status();
        if (stu_job_status != null) {
            stmt.bindString(4, stu_job_status);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String cdate = entity.getCdate();
        if (cdate != null) {
            stmt.bindString(6, cdate);
        }
 
        String cday = entity.getCday();
        if (cday != null) {
            stmt.bindString(7, cday);
        }
 
        Long deadline = entity.getDeadline();
        if (deadline != null) {
            stmt.bindLong(8, deadline);
        }
 
        Integer percent = entity.getPercent();
        if (percent != null) {
            stmt.bindLong(9, percent);
        }
 
        Boolean isfirst = entity.getIsfirst();
        if (isfirst != null) {
            stmt.bindLong(10, isfirst ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeWork readEntity(Cursor cursor, int offset) {
        HomeWork entity = new HomeWork( //
            cursor.getLong(offset + 0), // stu_job_id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // job_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // job_status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stu_job_status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cday
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // deadline
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // percent
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isfirst
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeWork entity, int offset) {
        entity.setStu_job_id(cursor.getLong(offset + 0));
        entity.setJob_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setJob_status(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStu_job_status(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCdate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeadline(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setPercent(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsfirst(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeWork entity, long rowId) {
        entity.setStu_job_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeWork entity) {
        if(entity != null) {
            return entity.getStu_job_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
