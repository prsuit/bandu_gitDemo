package me.bandu.talk.android.phone.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import me.bandu.talk.android.phone.db.bean.LessonBean;

import me.bandu.talk.android.phone.db.bean.PartBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PART_BEAN".
*/
public class PartBeanDao extends AbstractDao<PartBean, Long> {

    public static final String TABLENAME = "PART_BEAN";

    /**
     * Properties of entity PartBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Part_id = new Property(0, Long.class, "part_id", true, "PART_ID");
        public final static Property Part_name = new Property(1, String.class, "part_name", false, "PART_NAME");
        public final static Property Lesson_id = new Property(2, Long.class, "lesson_id", false, "LESSON_ID");
        public final static Property Centence_start = new Property(3, Integer.class, "centence_start", false, "CENTENCE_START");
        public final static Property Video_path = new Property(4, String.class, "video_path", false, "VIDEO_PATH");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;


    public PartBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PartBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PART_BEAN\" (" + //
                "\"PART_ID\" INTEGER PRIMARY KEY ," + // 0: part_id
                "\"PART_NAME\" TEXT," + // 1: part_name
                "\"LESSON_ID\" INTEGER," + // 2: lesson_id
                "\"CENTENCE_START\" INTEGER," + // 3: centence_start
                "\"VIDEO_PATH\" TEXT," + // 4: video_path
                "\"TYPE\" TEXT);"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PART_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PartBean entity) {
        stmt.clearBindings();
 
        Long part_id = entity.getPart_id();
        if (part_id != null) {
            stmt.bindLong(1, part_id);
        }
 
        String part_name = entity.getPart_name();
        if (part_name != null) {
            stmt.bindString(2, part_name);
        }
 
        Long lesson_id = entity.getLesson_id();
        if (lesson_id != null) {
            stmt.bindLong(3, lesson_id);
        }
 
        Integer centence_start = entity.getCentence_start();
        if (centence_start != null) {
            stmt.bindLong(4, centence_start);
        }
 
        String video_path = entity.getVideo_path();
        if (video_path != null) {
            stmt.bindString(5, video_path);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
    }

    @Override
    protected void attachEntity(PartBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PartBean readEntity(Cursor cursor, int offset) {
        PartBean entity = new PartBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // part_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // part_name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // lesson_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // centence_start
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // video_path
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PartBean entity, int offset) {
        entity.setPart_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPart_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLesson_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCentence_start(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setVideo_path(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PartBean entity, long rowId) {
        entity.setPart_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PartBean entity) {
        if(entity != null) {
            return entity.getPart_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLessonBeanDao().getAllColumns());
            builder.append(" FROM PART_BEAN T");
            builder.append(" LEFT JOIN LESSON_BEAN T0 ON T.\"LESSON_ID\"=T0.\"LESSON_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PartBean loadCurrentDeep(Cursor cursor, boolean lock) {
        PartBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LessonBean lessonBean = loadCurrentOther(daoSession.getLessonBeanDao(), cursor, offset);
        entity.setLessonBean(lessonBean);

        return entity;    
    }

    public PartBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PartBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PartBean> list = new ArrayList<PartBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PartBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PartBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
