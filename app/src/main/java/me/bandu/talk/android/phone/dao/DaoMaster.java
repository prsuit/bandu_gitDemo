package me.bandu.talk.android.phone.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 7): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 7;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        HomeWorkDao.createTable(db, ifNotExists);
        QuizDao.createTable(db, ifNotExists);
        SentenceDao.createTable(db, ifNotExists);
        CommentDao.createTable(db, ifNotExists);
        WorkQuizeDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        HomeWorkDao.dropTable(db, ifExists);
        QuizDao.dropTable(db, ifExists);
        SentenceDao.dropTable(db, ifExists);
        CommentDao.dropTable(db, ifExists);
        WorkQuizeDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            createAllTables(db,true);
            if (oldVersion==1&&newVersion==2){
                //版本1升级到版本2  通过查询sql语句的字符串，查看里面是否存在CURRENT_WORDS_SCORE这个字段，不存在就在该表上增加字段（不影响原始数据）
                String sentencesql = DaoUtils.getInstance().isFieldExist(db,"SENTENCE");
                if (!sentencesql.contains("CURRENT_WORDS_SCORE")){
                    //添加字段的sql语句
                    db.execSQL("alter table SENTENCE add CURRENT_WORDS_SCORE varchar");
                }
            }
            if (oldVersion==1&&newVersion==3){
                String sentencesql = DaoUtils.getInstance().isFieldExist(db,"SENTENCE");
                if (!sentencesql.contains("CURRENT_WORDS_SCORE")){
                    db.execSQL("alter table SENTENCE add CURRENT_WORDS_SCORE varchar");
                }
                if (!sentencesql.contains("STU_SECONDS")){
                    db.execSQL("alter table SENTENCE add STU_SECONDS integer");
                }
                if (!sentencesql.contains("CURRENT_STU_SECONDS")){
                    db.execSQL("alter table SENTENCE add STU_SECONDS integer");
                }
            }
            if (oldVersion==2&&newVersion==3){
                String sentencesql = DaoUtils.getInstance().isFieldExist(db,"SENTENCE");
                if (!sentencesql.contains("STU_SECONDS")){
                    db.execSQL("alter table SENTENCE add STU_SECONDS integer");
                }
                if (!sentencesql.contains("CURRENT_STU_SECONDS")){
                    db.execSQL("alter table SENTENCE add STU_SECONDS integer");
                }
            }
//            if (oldVersion==4&&newVersion==6){
            if (oldVersion < newVersion){
                //版本1升级到版本2  通过查询sql语句的字符串，查看里面是否存在CURRENT_WORDS_SCORE这个字段，不存在就在该表上增加字段（不影响原始数据）
                String sentencesql = DaoUtils.getInstance().isFieldExist(db,"SENTENCE");
                if (!sentencesql.contains("MP3_URL")){
                    //添加字段的sql语句
                    db.execSQL("alter table SENTENCE add MP3_URL varchar");
                }
               String quiz = DaoUtils.getInstance().isFieldExist(db,"QUIZ");
				if(!quiz.contains("UPLOAD_SPEND_TIME")){
					db.execSQL("alter table QUIZ add UPLOAD_SPEND_TIME varchar");
				}
            }
			
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(HomeWorkDao.class);
        registerDaoClass(QuizDao.class);
        registerDaoClass(SentenceDao.class);
        registerDaoClass(CommentDao.class);
        registerDaoClass(WorkQuizeDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
