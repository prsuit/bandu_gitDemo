package me.bandu.talk.android.phone.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENTENCE".
*/
public class SentenceDao extends AbstractDao<Sentence, Long> {

    public static final String TABLENAME = "SENTENCE";

    /**
     * Properties of entity Sentence.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Sentence_id = new Property(1, Long.class, "sentence_id", false, "SENTENCE_ID");
        public final static Property Hw_quiz_id = new Property(2, Long.class, "hw_quiz_id", false, "HW_QUIZ_ID");
        public final static Property Stu_job_id = new Property(3, Long.class, "stu_job_id", false, "STU_JOB_ID");
        public final static Property Quiz_id = new Property(4, Long.class, "quiz_id", false, "QUIZ_ID");
        public final static Property En = new Property(5, String.class, "en", false, "EN");
        public final static Property Mp3 = new Property(6, String.class, "mp3", false, "MP3");
        public final static Property Stu_done = new Property(7, Boolean.class, "stu_done", false, "STU_DONE");
        public final static Property Stu_mp3 = new Property(8, String.class, "stu_mp3", false, "STU_MP3");
        public final static Property Stu_score = new Property(9, String.class, "stu_score", false, "STU_SCORE");
        public final static Property Current_mp3 = new Property(10, String.class, "current_mp3", false, "CURRENT_MP3");
        public final static Property Current_score = new Property(11, Integer.class, "current_score", false, "CURRENT_SCORE");
        public final static Property Current_words_score = new Property(12, String.class, "current_words_score", false, "CURRENT_WORDS_SCORE");
        public final static Property Words_score = new Property(13, String.class, "words_score", false, "WORDS_SCORE");
        public final static Property Stu_seconds = new Property(14, Integer.class, "stu_seconds", false, "STU_SECONDS");
        public final static Property Current_stu_seconds = new Property(15, Integer.class, "current_stu_seconds", false, "CURRENT_STU_SECONDS");
        public final static Property Mp3_url = new Property(16, String.class, "mp3_url", false, "MP3_URL");
    };


    public SentenceDao(DaoConfig config) {
        super(config);
    }
    
    public SentenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENTENCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SENTENCE_ID\" INTEGER," + // 1: sentence_id
                "\"HW_QUIZ_ID\" INTEGER," + // 2: hw_quiz_id
                "\"STU_JOB_ID\" INTEGER," + // 3: stu_job_id
                "\"QUIZ_ID\" INTEGER," + // 4: quiz_id
                "\"EN\" TEXT," + // 5: en
                "\"MP3\" TEXT," + // 6: mp3
                "\"STU_DONE\" INTEGER," + // 7: stu_done
                "\"STU_MP3\" TEXT," + // 8: stu_mp3
                "\"STU_SCORE\" TEXT," + // 9: stu_score
                "\"CURRENT_MP3\" TEXT," + // 10: current_mp3
                "\"CURRENT_SCORE\" INTEGER," + // 11: current_score
                "\"CURRENT_WORDS_SCORE\" TEXT," + // 12: current_words_score
                "\"WORDS_SCORE\" TEXT," + // 13: words_score
                "\"STU_SECONDS\" INTEGER," + // 14: stu_seconds
                "\"CURRENT_STU_SECONDS\" INTEGER," + // 15: current_stu_seconds
                "\"MP3_URL\" TEXT);"); // 16: mp3_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENTENCE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sentence entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long sentence_id = entity.getSentence_id();
        if (sentence_id != null) {
            stmt.bindLong(2, sentence_id);
        }
 
        Long hw_quiz_id = entity.getHw_quiz_id();
        if (hw_quiz_id != null) {
            stmt.bindLong(3, hw_quiz_id);
        }
 
        Long stu_job_id = entity.getStu_job_id();
        if (stu_job_id != null) {
            stmt.bindLong(4, stu_job_id);
        }
 
        Long quiz_id = entity.getQuiz_id();
        if (quiz_id != null) {
            stmt.bindLong(5, quiz_id);
        }
 
        String en = entity.getEn();
        if (en != null) {
            stmt.bindString(6, en);
        }
 
        String mp3 = entity.getMp3();
        if (mp3 != null) {
            stmt.bindString(7, mp3);
        }
 
        Boolean stu_done = entity.getStu_done();
        if (stu_done != null) {
            stmt.bindLong(8, stu_done ? 1L: 0L);
        }
 
        String stu_mp3 = entity.getStu_mp3();
        if (stu_mp3 != null) {
            stmt.bindString(9, stu_mp3);
        }
 
        String stu_score = entity.getStu_score();
        if (stu_score != null) {
            stmt.bindString(10, stu_score);
        }
 
        String current_mp3 = entity.getCurrent_mp3();
        if (current_mp3 != null) {
            stmt.bindString(11, current_mp3);
        }
 
        Integer current_score = entity.getCurrent_score();
        if (current_score != null) {
            stmt.bindLong(12, current_score);
        }
 
        String current_words_score = entity.getCurrent_words_score();
        if (current_words_score != null) {
            stmt.bindString(13, current_words_score);
        }
 
        String words_score = entity.getWords_score();
        if (words_score != null) {
            stmt.bindString(14, words_score);
        }
 
        Integer stu_seconds = entity.getStu_seconds();
        if (stu_seconds != null) {
            stmt.bindLong(15, stu_seconds);
        }
 
        Integer current_stu_seconds = entity.getCurrent_stu_seconds();
        if (current_stu_seconds != null) {
            stmt.bindLong(16, current_stu_seconds);
        }
 
        String mp3_url = entity.getMp3_url();
        if (mp3_url != null) {
            stmt.bindString(17, mp3_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sentence readEntity(Cursor cursor, int offset) {
        Sentence entity = new Sentence( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // sentence_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // hw_quiz_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // stu_job_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // quiz_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // en
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mp3
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // stu_done
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // stu_mp3
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // stu_score
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // current_mp3
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // current_score
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // current_words_score
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // words_score
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // stu_seconds
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // current_stu_seconds
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // mp3_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sentence entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSentence_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setHw_quiz_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStu_job_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setQuiz_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMp3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStu_done(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setStu_mp3(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStu_score(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCurrent_mp3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCurrent_score(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCurrent_words_score(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWords_score(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStu_seconds(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCurrent_stu_seconds(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setMp3_url(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sentence entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sentence entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
