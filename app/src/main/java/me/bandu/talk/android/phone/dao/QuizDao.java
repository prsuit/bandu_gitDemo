package me.bandu.talk.android.phone.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "QUIZ".
 */
public class QuizDao extends AbstractDao<Quiz, Long> {

    public static final String TABLENAME = "QUIZ";

    /**
     * Properties of entity Quiz.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Quiz_id = new Property(0, long.class, "quiz_id", true, "QUIZ_ID");
        public final static Property Score = new Property(1, Integer.class, "score", false, "SCORE");
        public final static Property Stu_job_id = new Property(2, Long.class, "stu_job_id", false, "STU_JOB_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Level = new Property(5, Integer.class, "level", false, "LEVEL");
        public final static Property Commit_time = new Property(6, String.class, "commit_time", false, "COMMIT_TIME");
        public final static Property Spend_time = new Property(7, String.class, "spend_time", false, "SPEND_TIME");
        public final static Property Quiz_name = new Property(8, String.class, "quiz_name", false, "QUIZ_NAME");
        public final static Property Read_quiz_id = new Property(9, Integer.class, "read_quiz_id", false, "READ_QUIZ_ID");
        public final static Property Read_times = new Property(10, Integer.class, "read_times", false, "READ_TIMES");
        public final static Property Read_count = new Property(11, Integer.class, "read_count", false, "READ_COUNT");
        public final static Property Repeat_quiz_id = new Property(12, Integer.class, "repeat_quiz_id", false, "REPEAT_QUIZ_ID");
        public final static Property Repeat_times = new Property(13, Integer.class, "repeat_times", false, "REPEAT_TIMES");
        public final static Property Repeat_count = new Property(14, Integer.class, "repeat_count", false, "REPEAT_COUNT");
        public final static Property Recite_quiz_id = new Property(15, Integer.class, "recite_quiz_id", false, "RECITE_QUIZ_ID");
        public final static Property Recite_times = new Property(16, Integer.class, "recite_times", false, "RECITE_TIMES");
        public final static Property Recite_count = new Property(17, Integer.class, "recite_count", false, "RECITE_COUNT");
        public final static Property Upload_spend_time = new Property(18, String.class, "upload_spend_time", false, "UPLOAD_SPEND_TIME");
    }

    ;


    public QuizDao(DaoConfig config) {
        super(config);
    }

    public QuizDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUIZ\" (" + //
                "\"QUIZ_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: quiz_id
                "\"SCORE\" INTEGER," + // 1: score
                "\"STU_JOB_ID\" INTEGER," + // 2: stu_job_id
                "\"TITLE\" TEXT," + // 3: title
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"LEVEL\" INTEGER," + // 5: level
                "\"COMMIT_TIME\" TEXT," + // 6: commit_time
                "\"SPEND_TIME\" TEXT," + // 7: spend_time
                "\"QUIZ_NAME\" TEXT," + // 8: quiz_name
                "\"READ_QUIZ_ID\" INTEGER," + // 9: read_quiz_id
                "\"READ_TIMES\" INTEGER," + // 10: read_times
                "\"READ_COUNT\" INTEGER," + // 11: read_count
                "\"REPEAT_QUIZ_ID\" INTEGER," + // 12: repeat_quiz_id
                "\"REPEAT_TIMES\" INTEGER," + // 13: repeat_times
                "\"REPEAT_COUNT\" INTEGER," + // 14: repeat_count
                "\"RECITE_QUIZ_ID\" INTEGER," + // 15: recite_quiz_id
                "\"RECITE_TIMES\" INTEGER," + // 16: recite_times
                "\"RECITE_COUNT\" INTEGER," + // 17: recite_count
                "\"UPLOAD_SPEND_TIME\" TEXT);"); // 18: upload_spend_time
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUIZ\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Quiz entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getQuiz_id());

        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(2, score);
        }

        Long stu_job_id = entity.getStu_job_id();
        if (stu_job_id != null) {
            stmt.bindLong(3, stu_job_id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }

        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(6, level);
        }

        String commit_time = entity.getCommit_time();
        if (commit_time != null) {
            stmt.bindString(7, commit_time);
        }

        String spend_time = entity.getSpend_time();
        if (spend_time != null) {
            stmt.bindString(8, spend_time);
        }

        String quiz_name = entity.getQuiz_name();
        if (quiz_name != null) {
            stmt.bindString(9, quiz_name);
        }

        Integer read_quiz_id = entity.getRead_quiz_id();
        if (read_quiz_id != null) {
            stmt.bindLong(10, read_quiz_id);
        }

        Integer read_times = entity.getRead_times();
        if (read_times != null) {
            stmt.bindLong(11, read_times);
        }

        Integer read_count = entity.getRead_count();
        if (read_count != null) {
            stmt.bindLong(12, read_count);
        }

        Integer repeat_quiz_id = entity.getRepeat_quiz_id();
        if (repeat_quiz_id != null) {
            stmt.bindLong(13, repeat_quiz_id);
        }

        Integer repeat_times = entity.getRepeat_times();
        if (repeat_times != null) {
            stmt.bindLong(14, repeat_times);
        }

        Integer repeat_count = entity.getRepeat_count();
        if (repeat_count != null) {
            stmt.bindLong(15, repeat_count);
        }

        Integer recite_quiz_id = entity.getRecite_quiz_id();
        if (recite_quiz_id != null) {
            stmt.bindLong(16, recite_quiz_id);
        }

        Integer recite_times = entity.getRecite_times();
        if (recite_times != null) {
            stmt.bindLong(17, recite_times);
        }

        Integer recite_count = entity.getRecite_count();
        if (recite_count != null) {
            stmt.bindLong(18, recite_count);
        }

        String upload_spend_time = entity.getUpload_spend_time();
        if (upload_spend_time != null) {
            stmt.bindString(19, upload_spend_time);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Quiz readEntity(Cursor cursor, int offset) {
        Quiz entity = new Quiz( //
                cursor.getLong(offset + 0), // quiz_id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // score
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // stu_job_id
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // level
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // commit_time
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // spend_time
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // quiz_name
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // read_quiz_id
                cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // read_times
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // read_count
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // repeat_quiz_id
                cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // repeat_times
                cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // repeat_count
                cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // recite_quiz_id
                cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // recite_times
                cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // recite_count
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // upload_spend_time
                Boolean.valueOf(cursor.getString(offset + 19)), // upload_spend_time
                Boolean.valueOf(cursor.getString(offset + 20)), // upload_spend_time
                Boolean.valueOf(cursor.getString(offset + 21)) // upload_spend_time
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Quiz entity, int offset) {
        entity.setQuiz_id(cursor.getLong(offset + 0));
        entity.setScore(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStu_job_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLevel(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCommit_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSpend_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQuiz_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRead_quiz_id(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRead_times(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRead_count(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setRepeat_quiz_id(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setRepeat_times(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setRepeat_count(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setRecite_quiz_id(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setRecite_times(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setRecite_count(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setUpload_spend_time(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Quiz entity, long rowId) {
        entity.setQuiz_id(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Quiz entity) {
        if (entity != null) {
            return entity.getQuiz_id();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
